//typedef unsigned __int64 u64;
//typedef unsigned __int32 u32;

#define o64 ((unsigned __int64)1i64 << 63)
#define o56 ((unsigned __int64)1i64 << 55)
#define o32 ((unsigned __int32)1i32 << 31)

static unsigned __int64 IP[64] = {	// 64 -> 64
	o64>>0x39, o64>>0x31, o64>>0x29, o64>>0x21, o64>>0x19, o64>>0x11, o64>>0x09, o64>>0x01,
	o64>>0x3B, o64>>0x33, o64>>0x2B, o64>>0x23, o64>>0x1B, o64>>0x13, o64>>0x0B, o64>>0x03,
	o64>>0x3D, o64>>0x35, o64>>0x2D, o64>>0x25, o64>>0x1D, o64>>0x15, o64>>0x0D, o64>>0x05,
	o64>>0x3F, o64>>0x37, o64>>0x2F, o64>>0x27, o64>>0x1F, o64>>0x17, o64>>0x0F, o64>>0x07,
	o64>>0x38, o64>>0x30, o64>>0x28, o64>>0x20, o64>>0x18, o64>>0x10, o64>>0x08, o64>>0x00,
	o64>>0x3A, o64>>0x32, o64>>0x2A, o64>>0x22, o64>>0x1A, o64>>0x12, o64>>0x0A, o64>>0x02,
	o64>>0x3C, o64>>0x34, o64>>0x2C, o64>>0x24, o64>>0x1C, o64>>0x14, o64>>0x0C, o64>>0x04,
	o64>>0x3E, o64>>0x36, o64>>0x2E, o64>>0x26, o64>>0x1E, o64>>0x16, o64>>0x0E, o64>>0x06 };

static unsigned __int64 FP[64] = {	// 64 -> 64
	o64>>0x27, o64>>0x07, o64>>0x2F, o64>>0x0F, o64>>0x37, o64>>0x17, o64>>0x3F, o64>>0x1F,
	o64>>0x26, o64>>0x06, o64>>0x2E, o64>>0x0E, o64>>0x36, o64>>0x16, o64>>0x3E, o64>>0x1E,
	o64>>0x25, o64>>0x05, o64>>0x2D, o64>>0x0D, o64>>0x35, o64>>0x15, o64>>0x3D, o64>>0x1D,
	o64>>0x24, o64>>0x04, o64>>0x2C, o64>>0x0C, o64>>0x34, o64>>0x14, o64>>0x3C, o64>>0x1C,
	o64>>0x23, o64>>0x03, o64>>0x2B, o64>>0x0B, o64>>0x33, o64>>0x13, o64>>0x3B, o64>>0x1B,
	o64>>0x22, o64>>0x02, o64>>0x2A, o64>>0x0A, o64>>0x32, o64>>0x12, o64>>0x3A, o64>>0x1A,
	o64>>0x21, o64>>0x01, o64>>0x29, o64>>0x09, o64>>0x31, o64>>0x11, o64>>0x39, o64>>0x19,
	o64>>0x20, o64>>0x00, o64>>0x28, o64>>0x08, o64>>0x30, o64>>0x10, o64>>0x38, o64>>0x18 };

static unsigned __int64 PC1[56] = {	// 64 -> 56
	o64>>0x38, o64>>0x30, o64>>0x28, o64>>0x20, o64>>0x18, o64>>0x10, o64>>0x08, o64>>0x00,
	o64>>0x39, o64>>0x31, o64>>0x29, o64>>0x21, o64>>0x19, o64>>0x11, o64>>0x09, o64>>0x01,
	o64>>0x3A, o64>>0x32, o64>>0x2A, o64>>0x22, o64>>0x1A, o64>>0x12, o64>>0x0A, o64>>0x02,
	o64>>0x3B, o64>>0x33, o64>>0x2B, o64>>0x23,
	o64>>0x3E, o64>>0x36, o64>>0x2E, o64>>0x26, o64>>0x1E, o64>>0x16, o64>>0x0E, o64>>0x06,
	o64>>0x3D, o64>>0x35, o64>>0x2D, o64>>0x25, o64>>0x1D, o64>>0x15, o64>>0x0D, o64>>0x05,
	o64>>0x3C, o64>>0x34, o64>>0x2C, o64>>0x24, o64>>0x1C, o64>>0x14, o64>>0x0C, o64>>0x04,
	                                            o64>>0x1B, o64>>0x13, o64>>0x0B, o64>>0x03 };

static unsigned __int64 PC2[48] = {	// 56 -> 48
		o56>>0x0D, o56>>0x10, o56>>0x0A, o56>>0x17, o56>>0x00, o56>>0x04,
		o56>>0x02, o56>>0x1B, o56>>0x0E, o56>>0x05, o56>>0x14, o56>>0x09,
		o56>>0x16, o56>>0x12, o56>>0x0B, o56>>0x03, o56>>0x19, o56>>0x07,
		o56>>0x0F, o56>>0x06, o56>>0x1A, o56>>0x13, o56>>0x0C, o56>>0x01,
		o56>>0x28, o56>>0x33, o56>>0x1E, o56>>0x24, o56>>0x2E, o56>>0x36,
		o56>>0x1D, o56>>0x27, o56>>0x32, o56>>0x2C, o56>>0x20, o56>>0x2F,
		o56>>0x2B, o56>>0x30, o56>>0x26, o56>>0x37, o56>>0x21, o56>>0x34,
		o56>>0x2D, o56>>0x29, o56>>0x31, o56>>0x23, o56>>0x1C, o56>>0x1F };

static unsigned __int64 E[48] = {	// 32 -> 48
	o32>>0x1F, o32>>0x00, o32>>0x01, o32>>0x02, o32>>0x03, o32>>0x04,
	o32>>0x03, o32>>0x04, o32>>0x05, o32>>0x06, o32>>0x07, o32>>0x08,
	o32>>0x07, o32>>0x08, o32>>0x09, o32>>0x0A, o32>>0x0B, o32>>0x0C,
	o32>>0x0B, o32>>0x0C, o32>>0x0D, o32>>0x0E, o32>>0x0F, o32>>0x10,
	o32>>0x0F, o32>>0x10, o32>>0x11, o32>>0x12, o32>>0x13, o32>>0x14,
	o32>>0x13, o32>>0x14, o32>>0x15, o32>>0x16, o32>>0x17, o32>>0x18,
	o32>>0x17, o32>>0x18, o32>>0x19, o32>>0x1A, o32>>0x1B, o32>>0x1C,
	o32>>0x1B, o32>>0x1C, o32>>0x1D, o32>>0x1E, o32>>0x1F, o32>>0x00 };

static unsigned __int32 P[32] = {
		o32>>0x0F, o32>>0x06, o32>>0x13, o32>>0x14,
		o32>>0x1C, o32>>0x0B, o32>>0x1B, o32>>0x10,
		o32>>0x00, o32>>0x0E, o32>>0x16, o32>>0x19,
		o32>>0x04, o32>>0x11, o32>>0x1E, o32>>0x09,
		o32>>0x01, o32>>0x07, o32>>0x17, o32>>0x0D,
		o32>>0x1F, o32>>0x1A, o32>>0x02, o32>>0x08,
		o32>>0x12, o32>>0x0C, o32>>0x1D, o32>>0x05,
		o32>>0x15, o32>>0x0A, o32>>0x03, o32>>0x18	};

static unsigned __int32 S[8][4][16] = {
{	// S[0]
	{0xE,0x4,0xD,0x1,0x2,0xF,0xB,0x8,0x3,0xA,0x6,0xC,0x5,0x9,0x0,0x7},
	{0x0,0xF,0x7,0x4,0xE,0x2,0xD,0x1,0xA,0x6,0xC,0xB,0x9,0x5,0x3,0x8},
	{0x4,0x1,0xE,0x8,0xD,0x6,0x2,0xB,0xF,0xC,0x9,0x7,0x3,0xA,0x5,0x0},
	{0xF,0xC,0x8,0x2,0x4,0x9,0x1,0x7,0x5,0xB,0x3,0xE,0xA,0x0,0x6,0xD}	},
{	//S[1]
	{0xF,0x1,0x8,0xE,0x6,0xB,0x3,0x4,0x9,0x7,0x2,0xD,0xC,0x0,0x5,0xA},
	{0x3,0xD,0x4,0x7,0xF,0x2,0x8,0xE,0xC,0x0,0x1,0xA,0x6,0x9,0xB,0x5},
	{0x0,0xE,0x7,0xB,0xA,0x4,0xD,0x1,0x5,0x8,0xC,0x6,0x9,0x3,0x2,0xF},
	{0xD,0x8,0xA,0x1,0x3,0xF,0x4,0x2,0xB,0x6,0x7,0xC,0x0,0x5,0xE,0x9}	},
{	//S[2]
	{0xA,0x0,0x9,0xE,0x6,0x3,0xF,0x5,0x1,0xD,0xC,0x7,0xB,0x4,0x2,0x8},
	{0xD,0x7,0x0,0x9,0x3,0x4,0x6,0xA,0x2,0x8,0x5,0xE,0xC,0xB,0xF,0x1},
	{0xD,0x6,0x4,0x9,0x8,0xF,0x3,0x0,0xB,0x1,0x2,0xC,0x5,0xA,0xE,0x7},
	{0x1,0xA,0xD,0x0,0x6,0x9,0x8,0x7,0x4,0xF,0xE,0x3,0xB,0x5,0x2,0xC}	},
{	//S[3]
	{0x7,0xD,0xE,0x3,0x0,0x6,0x9,0xA,0x1,0x2,0x8,0x5,0xB,0xC,0x4,0xF},
	{0xD,0x8,0xB,0x5,0x6,0xF,0x0,0x3,0x4,0x7,0x2,0xC,0x1,0xA,0xE,0x9},
	{0xA,0x6,0x9,0x0,0xC,0xB,0x7,0xD,0xF,0x1,0x3,0xE,0x5,0x2,0x8,0x4},
	{0x3,0xF,0x0,0x6,0xA,0x1,0xD,0x8,0x9,0x4,0x5,0xB,0xC,0x7,0x2,0xE}	},
{	//S[4]
	{0x2,0xC,0x4,0x1,0x7,0xA,0xB,0x6,0x8,0x5,0x3,0xF,0xD,0x0,0xE,0x9},
	{0xE,0xB,0x2,0xC,0x4,0x7,0xD,0x1,0x5,0x0,0xF,0xA,0x3,0x9,0x8,0x6},
	{0x4,0x2,0x1,0xB,0xA,0xD,0x7,0x8,0xF,0x9,0xC,0x5,0x6,0x3,0x0,0xE},
	{0xB,0x8,0xC,0x7,0x1,0xE,0x2,0xD,0x6,0xF,0x0,0x9,0xA,0x4,0x5,0x3}	},
{	//S[5]
	{0xC,0x1,0xA,0xF,0x9,0x2,0x6,0x8,0x0,0xD,0x3,0x4,0xE,0x7,0x5,0xB},
	{0xA,0xF,0x4,0x2,0x7,0xC,0x9,0x5,0x6,0x1,0xD,0xE,0x0,0xB,0x3,0x8},
	{0x9,0xE,0xF,0x5,0x2,0x8,0xC,0x3,0x7,0x0,0x4,0xA,0x1,0xD,0xB,0x6},
	{0x4,0x3,0x2,0xC,0x9,0x5,0xF,0xA,0xB,0xE,0x1,0x7,0x6,0x0,0x8,0xD}	},
{	//S[6]
	{0x4,0xB,0x2,0xE,0xF,0x0,0x8,0xD,0x3,0xC,0x9,0x7,0x5,0xA,0x6,0x1},
	{0xD,0x0,0xB,0x7,0x4,0x9,0x1,0xA,0xE,0x3,0x5,0xC,0x2,0xF,0x8,0x6},
	{0x1,0x4,0xB,0xD,0xC,0x3,0x7,0xE,0xA,0xF,0x6,0x8,0x0,0x5,0x9,0x2},
	{0x6,0xB,0xD,0x8,0x1,0x4,0xA,0x7,0x9,0x5,0x0,0xF,0xE,0x2,0x3,0xC}	},

{	//S[7]
	{0xD,0x2,0x8,0x4,0x6,0xF,0xB,0x1,0xA,0x9,0x3,0xE,0x5,0x0,0xC,0x7},
	{0x1,0xF,0xD,0x8,0xA,0x3,0x7,0x4,0xC,0x5,0x6,0xB,0x0,0xE,0x9,0x2},
	{0x7,0xB,0x4,0x1,0x9,0xC,0xE,0x2,0x0,0x6,0xA,0xD,0xF,0x3,0x5,0x8},
	{0x2,0x1,0xE,0x7,0x4,0xA,0x8,0xD,0xF,0xC,0x9,0x0,0x3,0x5,0x6,0xB}	}	};

//////////////////////////////

unsigned __int64 ROL2828(unsigned __int64 x, int v)
{	unsigned __int64 a,b;
	switch (v)
	{	case 0 : a=0; b=x; break;
		case 1 : a = (x & 0x0080000008000000) >> 27;
				 b = (x & 0x007FFFFFF7FFFFFF) << 1;	break;
		case 2 : a = (x & 0x00C000000C000000) >> 26; 
				 b = (x & 0x003FFFFFF3FFFFFF) << 2;	break;
	}
	return a | b;
}

unsigned __int64 ROR2828(unsigned __int64 x, int v)
{	unsigned __int64 a,b;
	switch (v)
	{	case 0 : a=0; b=x; break;
		case 1 : a = (x & 0x0000000010000001) << 27;
				 b = (x & 0x00FFFFFFEFFFFFFE) >> 1;	break;
		case 2 : a = (x & 0x0000000030000003) << 26; 
				 b = (x & 0x00FFFFFFCFFFFFFC) >> 2;	break;
	}
	return a | b;
}

unsigned __int64 Permutation(unsigned __int64 Input, unsigned __int64 * Table, int n)
{	unsigned __int64 Output = 0;
	for (int b=0; b<n; b++)	{ Output<<=1; Output |= (Input & Table[b]) ? 1 : 0;	}
	return Output;
}

unsigned __int32 Permutation(unsigned __int32 Input, unsigned __int32 * Table, int n)
{	unsigned __int32 Output = 0;
	for (int b=0; b<n; b++)	{ Output<<=1; Output |= (Input & Table[b]) ? 1 : 0;	}
	return Output;
}

unsigned __int32 Za(unsigned __int64 R, unsigned __int64 K)
{	unsigned __int64 X = Permutation(R, E, 48) ^ K;
	unsigned __int32 x[8],y[8];
	int i,row,col;
	
	for (i=7;i>=0;i--)	{	x[i] = (unsigned __int32)X & 0x3F;	X >>=6;	}
	
	for (i=0;i<8;i++)
	{	row = ((x[i] & 0x20) >> 4) + (x[i] & 1) ; 
		col = (x[i] >> 1) & 0x0F;
		y[i] = S[i][row][col]; 
	}

	unsigned __int32 Y=0;
	for (i=0;i<8;i++)	{	Y<<=4; Y+=y[i];	}
	Y = Permutation(Y, P, 32);
	return Y;
}

unsigned __int64 DES_encrypt(unsigned __int64 M, unsigned __int64 Key)
{
	unsigned __int64 C;
	unsigned __int32 L[17],R[17];
	unsigned __int64 CD[17],	K[17];
	
	CD[0] = Permutation(Key, PC1, 56);
	C = Permutation(M, IP, 64);
	L[0] = (unsigned __int32)(C >> 32);	R[0] = (unsigned __int32)C;
	
	for (int i=1; i<=16; i++) 
	{	CD[i] = ROL2828(CD[i-1], i==1||i==2||i==9||i==16 ? 1 : 2 );
		K[i] = Permutation(CD[i], PC2, 48);
		L[i] = R[i-1];
		R[i] = L[i-1] ^ Za(R[i-1], K[i]);
	}

	C=0; C = R[16]; C<<=32; C |= L[16];
	C = Permutation(C, FP, 64);
	
	return C;
}

unsigned __int64 DES_decrypt(unsigned __int64 M, unsigned __int64 Key)
{	unsigned __int64 C;
	unsigned __int32 L[17],R[17];
	unsigned __int64 CD[17],	K[17];
	
	CD[0] = Permutation(Key, PC1, 56);
	C = Permutation(M, IP, 64);
	L[0] = (unsigned __int32)(C >> 32);	R[0] = (unsigned __int32)C;
		
	for (int i=1; i<=16; i++) 
	{	CD[i] = ROR2828(CD[i-1], i==1 ? 0 : i==2||i==9||i==16 ? 1 : 2 );
		K[i] = Permutation(CD[i], PC2, 48);
		L[i] = R[i-1];
		R[i] = L[i-1] ^ Za(R[i-1], K[i]);
	}

	C=0; C = R[16]; C<<=32; C |= L[16];
	C = Permutation(C, FP, 64);
	
	return C;
}

